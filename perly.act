/* -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 155 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 3:
#line 160 "perly.y"
    {
			  newPROG(block_end((ps[-1].val.ival),(ps[0].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}

    break;

  case 4:
#line 166 "perly.y"
    {
			  parser->expect = XTERM;
                          (yyval.ival) = 0;
			}

    break;

  case 5:
#line 171 "perly.y"
    {
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			}

    break;

  case 6:
#line 176 "perly.y"
    {
			  parser->expect = XBLOCK;
                          (yyval.ival) = 0;
			}

    break;

  case 7:
#line 181 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}

    break;

  case 8:
#line 189 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 9:
#line 194 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}

    break;

  case 10:
#line 202 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 11:
#line 207 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = yytoken = YYEOF;
			}

    break;

  case 12:
#line 215 "perly.y"
    {
			  parser->expect = XSTATE;
                          (yyval.ival) = 0;
			}

    break;

  case 13:
#line 220 "perly.y"
    {
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			}

    break;

  case 14:
#line 225 "perly.y"
    {
			  parser->expect = XSTATE;
			  (yyval.ival) = 0;
			}

    break;

  case 15:
#line 230 "perly.y"
    {
			  PL_eval_root = (ps[0].val.opval);
			  (yyval.ival) = 0;
			}

    break;

  case 16:
#line 239 "perly.y"
    { (yyval.ival) = KW_PACKAGE; }

    break;

  case 17:
#line 241 "perly.y"
    { (yyval.ival) = KW_CLASS; }

    break;

  case 18:
#line 247 "perly.y"
    { (yyval.ival) = KW_SUB_named_sig; }

    break;

  case 19:
#line 249 "perly.y"
    { (yyval.ival) = KW_METHOD_named; }

    break;

  case 20:
#line 254 "perly.y"
    { if (parser->copline > (line_t)(ps[-3].val.ival))
			      parser->copline = (line_t)(ps[-3].val.ival);
			  (yyval.opval) = block_end((ps[-2].val.ival), (ps[-1].val.opval));
			}

    break;

  case 21:
#line 261 "perly.y"
    { (yyval.opval) = NULL; }

    break;

  case 22:
#line 266 "perly.y"
    { if (parser->copline > (line_t)(ps[-6].val.ival))
			      parser->copline = (line_t)(ps[-6].val.ival);
			  (yyval.opval) = block_end((ps[-5].val.ival), (ps[-2].val.opval));
			}

    break;

  case 23:
#line 273 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }

    break;

  case 24:
#line 278 "perly.y"
    { if (parser->copline > (line_t)(ps[-3].val.ival))
			      parser->copline = (line_t)(ps[-3].val.ival);
			  (yyval.opval) = block_end((ps[-2].val.ival), (ps[-1].val.opval));
			}

    break;

  case 25:
#line 285 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }

    break;

  case 27:
#line 294 "perly.y"
    { parser->in_my = 1; }

    break;

  case 28:
#line 296 "perly.y"
    { parser->in_my = 0; intro_my(); }

    break;

  case 29:
#line 298 "perly.y"
    { (yyval.opval) = (ps[-2].val.opval); }

    break;

  case 31:
#line 305 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[-1].val.opval), (ps[0].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[-1].val.opval) && (ps[0].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}

    break;

  case 33:
#line 316 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[-1].val.opval), (ps[0].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[-1].val.opval) && (ps[0].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}

    break;

  case 34:
#line 325 "perly.y"
    {
			  (yyval.opval) = (ps[0].val.opval) ? newSTATEOP(0, NULL, (ps[0].val.opval)) : NULL;
			}

    break;

  case 35:
#line 329 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 36:
#line 333 "perly.y"
    {
                          SV *label = cSVOPx_sv((ps[-1].val.opval));
			  (yyval.opval) = newSTATEOP(SvFLAGS(label) & SVf_UTF8,
                                            savepv(SvPVX_const(label)), (ps[0].val.opval));
                          op_free((ps[-1].val.opval));
			}

    break;

  case 37:
#line 340 "perly.y"
    {
                          SV *label = cSVOPx_sv((ps[-1].val.opval));
			  (yyval.opval) = newSTATEOP(SvFLAGS(label) & SVf_UTF8,
                                            savepv(SvPVX_const(label)), (ps[0].val.opval));
                          op_free((ps[-1].val.opval));
			}

    break;

  case 38:
#line 350 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 39:
#line 352 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[-2].val.ival), (ps[-1].val.opval), (ps[0].val.opval));
			  (yyval.opval) = NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
			      pad_add_weakref(fmtcv);
			  }
			  parser->parsed_sub = 1;
			}

    break;

  case 40:
#line 364 "perly.y"
    {
                          init_named_cv(PL_compcv, (ps[-1].val.opval));
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}

    break;

  case 41:
#line 370 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[-5].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[-4].val.ival), (ps[-5].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval))
			      : newMYSUB((ps[-4].val.ival), (ps[-5].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval))
			  ;
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}

    break;

  case 42:
#line 385 "perly.y"
    {
                          init_named_cv(PL_compcv, (ps[-1].val.opval));
			  /* Can now distinguish 'sub' from 'method' */
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}

    break;

  case 43:
#line 392 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[-4].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[-3].val.ival), (ps[-4].val.opval), NULL, (ps[-1].val.opval), (ps[0].val.opval))
			      : newMYSUB(  (ps[-3].val.ival), (ps[-4].val.opval), NULL, (ps[-1].val.opval), (ps[0].val.opval))
			  ;
			  (yyval.opval) = NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}

    break;

  case 44:
#line 403 "perly.y"
    {
			  package((ps[-1].val.opval));
			  if ((ps[-2].val.opval))
			      package_version((ps[-2].val.opval));
			  (yyval.opval) = NULL;
			  if((ps[-3].val.ival) == KW_CLASS) {
			      class_setup_stash(PL_curstash);
			      warn("TODO: arrange for class seal sometime");
			  }
			}

    break;

  case 45:
#line 414 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }

    break;

  case 46:
#line 416 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[-6].val.ival), (ps[-5].val.ival), (ps[-3].val.opval), (ps[-2].val.opval), (ps[-1].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = NULL;
			}

    break;

  case 47:
#line 423 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-4].val.ival),
			      newCONDOP(0, (ps[-3].val.opval), op_scope((ps[-1].val.opval)), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-6].val.ival);
			}

    break;

  case 48:
#line 429 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-4].val.ival),
                              newCONDOP(0, (ps[-3].val.opval), (ps[0].val.opval), op_scope((ps[-1].val.opval))));
			  parser->copline = (line_t)(ps[-6].val.ival);
			}

    break;

  case 49:
#line 435 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-3].val.ival), newGIVENOP((ps[-2].val.opval), op_scope((ps[0].val.opval)), 0));
			  parser->copline = (line_t)(ps[-5].val.ival);
			}

    break;

  case 50:
#line 440 "perly.y"
    { (yyval.opval) = block_end((ps[-3].val.ival), newWHENOP((ps[-2].val.opval), op_scope((ps[0].val.opval)))); }

    break;

  case 51:
#line 442 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[0].val.opval))); }

    break;

  case 52:
#line 444 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-5].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[-4].val.opval), (ps[-1].val.opval), (ps[0].val.opval), (ps[-2].val.ival)));
			  parser->copline = (line_t)(ps[-7].val.ival);
			}

    break;

  case 53:
#line 451 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-5].val.ival),
				  newWHILEOP(0, 1, NULL,
				      (ps[-4].val.opval), (ps[-1].val.opval), (ps[0].val.opval), (ps[-2].val.ival)));
			  parser->copline = (line_t)(ps[-7].val.ival);
			}

    break;

  case 54:
#line 458 "perly.y"
    { parser->expect = XTERM; }

    break;

  case 55:
#line 460 "perly.y"
    { parser->expect = XTERM; }

    break;

  case 56:
#line 463 "perly.y"
    {
			  OP *initop = (ps[-9].val.opval);
			  OP *forop = newWHILEOP(0, 1, NULL,
				      scalar((ps[-6].val.opval)), (ps[0].val.opval), (ps[-2].val.opval), (ps[-3].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[-10].val.ival), forop);
			  parser->copline = (line_t)(ps[-12].val.ival);
			}

    break;

  case 57:
#line 478 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-6].val.ival), newFOROP(0, (ps[-5].val.opval), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-8].val.ival);
			}

    break;

  case 58:
#line 483 "perly.y"
    {
                          if ((ps[-6].val.opval)->op_type == OP_PADSV)
                            /* degenerate case of 1 var: for my ($x) ....
                               Flag it so it can be special-cased in newFOROP */
                                (ps[-6].val.opval)->op_flags |= OPf_PARENS;
			  (yyval.opval) = block_end((ps[-8].val.ival), newFOROP(0, (ps[-6].val.opval), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-10].val.ival);
			}

    break;

  case 59:
#line 492 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-4].val.ival), newFOROP(0,
				      op_lvalue((ps[-6].val.opval), OP_ENTERLOOP), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-7].val.ival);
			}

    break;

  case 60:
#line 498 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[0].val.opval)); }

    break;

  case 61:
#line 500 "perly.y"
    {
			  (yyval.opval) = block_end(
				(ps[-7].val.ival),
				newFOROP(0,
					 op_lvalue(
					    newUNOP(OP_REFGEN, 0,
						    (ps[-5].val.opval)),
					    OP_ENTERLOOP),
					 (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval))
			  );
			  parser->copline = (line_t)(ps[-9].val.ival);
			}

    break;

  case 62:
#line 513 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-4].val.ival), newFOROP(
				0, op_lvalue(newUNOP(OP_REFGEN, 0,
						     (ps[-6].val.opval)),
					     OP_ENTERLOOP), (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-8].val.ival);
			}

    break;

  case 63:
#line 521 "perly.y"
    {
			  (yyval.opval) = block_end((ps[-4].val.ival),
				  newFOROP(0, NULL, (ps[-3].val.opval), (ps[-1].val.opval), (ps[0].val.opval)));
			  parser->copline = (line_t)(ps[-6].val.ival);
			}

    break;

  case 64:
#line 527 "perly.y"
    {
			  if(!(ps[0].val.opval)) {
			      yyerror("catch block requires a (VAR)");
			      YYERROR;
			  }
			}

    break;

  case 65:
#line 534 "perly.y"
    {
			  (yyval.opval) = newTRYCATCHOP(0,
				  (ps[-6].val.opval), (ps[-3].val.opval), block_end((ps[-4].val.ival), op_scope((ps[-1].val.opval))));
			  if((ps[0].val.opval))
			      (yyval.opval) = op_wrap_finally((yyval.opval), (ps[0].val.opval));
			  parser->copline = (line_t)(ps[-7].val.ival);
			}

    break;

  case 66:
#line 542 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, (ps[-1].val.opval), (ps[0].val.opval), 0);
			}

    break;

  case 67:
#line 548 "perly.y"
    {
			  package((ps[-2].val.opval));
			  if ((ps[-3].val.opval)) {
			      package_version((ps[-3].val.opval));
			  }
			  if((ps[-4].val.ival) == KW_CLASS)
			      class_setup_stash(PL_curstash);
			}

    break;

  case 68:
#line 557 "perly.y"
    {
			  if((ps[-7].val.ival) == KW_CLASS)
			      class_seal_stash(PL_curstash);
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, NULL,
				  NULL, block_end((ps[-3].val.ival), (ps[-1].val.opval)), NULL, 0);
			  if (parser->copline > (line_t)(ps[-4].val.ival))
			      parser->copline = (line_t)(ps[-4].val.ival);
			  /* We can now use the value of $1 to determine package vs class */
			}

    break;

  case 69:
#line 568 "perly.y"
    {
			  (yyval.opval) = (ps[-1].val.opval);
			}

    break;

  case 70:
#line 572 "perly.y"
    {
			  (yyval.opval) = newDEFEROP(0, op_scope((ps[0].val.opval)));
			}

    break;

  case 71:
#line 576 "perly.y"
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			}

    break;

  case 72:
#line 581 "perly.y"
    {
			  (yyval.opval) = NULL;
			  parser->copline = NOLINE;
			}

    break;

  case 73:
#line 589 "perly.y"
    { OP *list;
			  if ((ps[0].val.opval)) {
			      OP *term = (ps[0].val.opval);
			      list = op_append_elem(OP_LIST, (ps[-1].val.opval), term);
			  }
			  else {
			      list = (ps[-1].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}

    break;

  case 75:
#line 608 "perly.y"
    { (yyval.opval) = op_unscope((ps[-1].val.opval)); }

    break;

  case 77:
#line 616 "perly.y"
    { (yyval.opval) = NULL; }

    break;

  case 78:
#line 618 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 79:
#line 620 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[0].val.opval), (ps[-2].val.opval)); }

    break;

  case 80:
#line 622 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[0].val.opval), (ps[-2].val.opval)); }

    break;

  case 81:
#line 624 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[0].val.opval)), (ps[-2].val.opval)); }

    break;

  case 82:
#line 626 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[0].val.opval), (ps[-2].val.opval)); }

    break;

  case 83:
#line 628 "perly.y"
    { (yyval.opval) = newFOROP(0, NULL, (ps[0].val.opval), (ps[-2].val.opval), NULL);
			  parser->copline = (line_t)(ps[-1].val.ival); }

    break;

  case 84:
#line 631 "perly.y"
    { (yyval.opval) = newWHENOP((ps[0].val.opval), op_scope((ps[-2].val.opval))); }

    break;

  case 86:
#line 638 "perly.y"
    {
			  ((ps[0].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[0].val.opval));
			}

    break;

  case 87:
#line 643 "perly.y"
    { parser->copline = (line_t)(ps[-5].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[-3].val.opval)),
				op_scope((ps[-1].val.opval)), (ps[0].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}

    break;

  case 89:
#line 655 "perly.y"
    { (yyval.opval) = op_scope((ps[0].val.opval)); }

    break;

  case 90:
#line 660 "perly.y"
    { (yyval.opval) = NULL; }

    break;

  case 91:
#line 662 "perly.y"
    { (yyval.opval) = op_scope((ps[0].val.opval)); }

    break;

  case 92:
#line 667 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }

    break;

  case 95:
#line 679 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }

    break;

  case 97:
#line 687 "perly.y"
    { (yyval.opval) = invert(scalar((ps[0].val.opval))); }

    break;

  case 98:
#line 692 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); intro_my(); }

    break;

  case 99:
#line 696 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); intro_my(); }

    break;

  case 100:
#line 699 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 102:
#line 704 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }

    break;

  case 103:
#line 710 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }

    break;

  case 104:
#line 715 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }

    break;

  case 110:
#line 734 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 111:
#line 736 "perly.y"
    { (yyval.opval) = NULL; }

    break;

  case 112:
#line 741 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 113:
#line 743 "perly.y"
    { (yyval.opval) = NULL; }

    break;

  case 114:
#line 754 "perly.y"
    { parser->in_my = 0; (yyval.opval) = NULL; }

    break;

  case 115:
#line 756 "perly.y"
    { parser->in_my = 0; (yyval.opval) = (ps[0].val.opval); }

    break;

  case 116:
#line 761 "perly.y"
    { (yyval.ival) = '@'; }

    break;

  case 117:
#line 763 "perly.y"
    { (yyval.ival) = '%'; }

    break;

  case 118:
#line 767 "perly.y"
    {
                            I32 sigil   = (ps[-2].val.ival);
                            OP *var     = (ps[-1].val.opval);
                            OP *defexpr = (ps[0].val.opval);

                            if (parser->sig_slurpy)
                                yyerror("Multiple slurpy parameters not allowed");
                            parser->sig_slurpy = (char)sigil;

                            if (defexpr)
                                yyerror("A slurpy parameter may not have "
                                        "a default value");

                            (yyval.opval) = var ? newSTATEOP(0, NULL, var) : NULL;
                        }

    break;

  case 120:
#line 788 "perly.y"
    { (yyval.opval) = newOP(OP_NULL, 0); }

    break;

  case 121:
#line 790 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 122:
#line 796 "perly.y"
    {
                            OP *var     = (ps[-1].val.opval);
                            OP *defexpr = (ps[0].val.opval);

                            if (parser->sig_slurpy)
                                yyerror("Slurpy parameter not last");

                            parser->sig_elems++;

                            if (defexpr) {
                                parser->sig_optelems++;

                                if (   defexpr->op_type == OP_NULL
                                    && !(defexpr->op_flags & OPf_KIDS))
                                {
                                    /* handle '$=' special case */
                                    if (var)
                                        yyerror("Optional parameter "
                                                    "lacks default expression");
                                    op_free(defexpr);
                                }
                                else { 
                                    /* a normal '=default' expression */ 
                                    OP *defop = (OP*)alloc_LOGOP(OP_ARGDEFELEM,
                                                        defexpr,
                                                        LINKLIST(defexpr));
                                    /* re-purpose op_targ to hold @_ index */
                                    defop->op_targ =
                                        (PADOFFSET)(parser->sig_elems - 1);

                                    if (var) {
                                        var->op_flags |= OPf_STACKED;
                                        (void)op_sibling_splice(var,
                                                        NULL, 0, defop);
                                        scalar(defop);
                                    }
                                    else
                                        var = newUNOP(OP_NULL, 0, defop);

                                    LINKLIST(var);
                                    /* NB: normally the first child of a
                                     * logop is executed before the logop,
                                     * and it pushes a boolean result
                                     * ready for the logop. For ARGDEFELEM,
                                     * the op itself does the boolean
                                     * calculation, so set the first op to
                                     * it instead.
                                     */
                                    var->op_next = defop;
                                    defexpr->op_next = var;
                                }
                            }
                            else {
                                if (parser->sig_optelems)
                                    yyerror("Mandatory parameter "
                                            "follows optional parameter");
                            }

                            (yyval.opval) = var ? newSTATEOP(0, NULL, var) : NULL;
                        }

    break;

  case 123:
#line 861 "perly.y"
    { parser->in_my = KEY_sigvar; (yyval.opval) = (ps[0].val.opval); }

    break;

  case 124:
#line 863 "perly.y"
    { parser->in_my = KEY_sigvar; (yyval.opval) = (ps[0].val.opval); }

    break;

  case 125:
#line 869 "perly.y"
    { (yyval.opval) = (ps[-1].val.opval); }

    break;

  case 126:
#line 871 "perly.y"
    {
			  (yyval.opval) = op_append_list(OP_LINESEQ, (ps[-2].val.opval), (ps[0].val.opval));
			}

    break;

  case 127:
#line 875 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 132:
#line 892 "perly.y"
    { (yyval.opval) = (ps[-1].val.opval); }

    break;

  case 133:
#line 895 "perly.y"
    {
                            ENTER;
                            SAVEIV(parser->sig_elems);
                            SAVEIV(parser->sig_optelems);
                            SAVEI8(parser->sig_slurpy);
                            parser->sig_elems    = 0;
                            parser->sig_optelems = 0;
                            parser->sig_slurpy   = 0;
                            parser->in_my        = KEY_sigvar;
                        }

    break;

  case 134:
#line 906 "perly.y"
    {
                            OP            *sigops = (ps[0].val.opval);
                            struct op_argcheck_aux *aux;
                            OP            *check;

			    if (!FEATURE_SIGNATURES_IS_ENABLED)
			        Perl_croak(aTHX_ "Experimental "
                                    "subroutine signatures not enabled");

                            /* We shouldn't get here otherwise */
                            aux = (struct op_argcheck_aux*)
                                    PerlMemShared_malloc(
                                        sizeof(struct op_argcheck_aux));
                            aux->params     = parser->sig_elems;
                            aux->opt_params = parser->sig_optelems;
                            aux->slurpy     = parser->sig_slurpy;
                            check = newUNOP_AUX(OP_ARGCHECK, 0, NULL,
                                            (UNOP_AUX_item *)aux);
                            sigops = op_prepend_elem(OP_LINESEQ, check, sigops);
                            sigops = op_prepend_elem(OP_LINESEQ,
                                                newSTATEOP(0, NULL, NULL),
                                                sigops);
                            /* a nextstate at the end handles context
                             * correctly for an empty sub body */
                            sigops = op_append_elem(OP_LINESEQ,
                                                sigops,
                                                newSTATEOP(0, NULL, NULL));
                            /* wrap the list of arg ops in a NULL aux op.
                              This serves two purposes. First, it makes
                              the arg list a separate subtree from the
                              body of the sub, and secondly the null op
                              may in future be upgraded to an OP_SIGNATURE
                              when implemented. For now leave it as
                              ex-argcheck */
                            (yyval.opval) = newUNOP_AUX(OP_ARGCHECK, 0, sigops, NULL);
                            op_null((yyval.opval));

			    CvSIGNATURE_on(PL_compcv);

                            parser->in_my = 0;
                            /* tell the toker that attrributes can follow
                             * this sig, but only so that the toker
                             * can skip through any (illegal) trailing
                             * attribute text then give a useful error
                             * message about "attributes before sig",
                             * rather than falling over ina mess at
                             * unrecognised syntax.
                             */
                            parser->expect = XATTRBLOCK;
                            parser->sig_seen = TRUE;
                            LEAVE;
			}

    break;

  case 136:
#line 963 "perly.y"
    { (yyval.opval) = NULL; }

    break;

  case 137:
#line 969 "perly.y"
    {
			  if (parser->copline > (line_t)(ps[-2].val.ival))
			      parser->copline = (line_t)(ps[-2].val.ival);
			  (yyval.opval) = block_end((ps[-3].val.ival), (ps[-1].val.opval));
			}

    break;

  case 139:
#line 981 "perly.y"
    { (yyval.opval) = NULL; }

    break;

  case 140:
#line 986 "perly.y"
    {
			  if (parser->copline > (line_t)(ps[-2].val.ival))
			      parser->copline = (line_t)(ps[-2].val.ival);
			  (yyval.opval) = block_end((ps[-4].val.ival),
				op_append_list(OP_LINESEQ, (ps[-3].val.opval), (ps[-1].val.opval)));
 			}

    break;

  case 141:
#line 997 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 142:
#line 999 "perly.y"
    { (yyval.opval) = newLOGOP((ps[-1].val.ival), 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 144:
#line 1005 "perly.y"
    { (yyval.opval) = (ps[-1].val.opval); }

    break;

  case 145:
#line 1007 "perly.y"
    {
			  OP* term = (ps[0].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[-2].val.opval), term);
			}

    break;

  case 147:
#line 1016 "perly.y"
    { (yyval.opval) = op_convert_list((ps[-2].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[-2].val.ival),(ps[-1].val.opval)), (ps[0].val.opval)) );
			}

    break;

  case 148:
#line 1020 "perly.y"
    { (yyval.opval) = op_convert_list((ps[-4].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[-4].val.ival),(ps[-2].val.opval)), (ps[-1].val.opval)) );
			}

    break;

  case 149:
#line 1024 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[-5].val.opval)), (ps[-1].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[-3].val.opval))));
			}

    break;

  case 150:
#line 1030 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[-2].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[0].val.opval))));
			}

    break;

  case 151:
#line 1035 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[-1].val.opval), (ps[0].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[-2].val.opval))));
			}

    break;

  case 152:
#line 1041 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[-3].val.opval), (ps[-1].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[-4].val.opval))));
			}

    break;

  case 153:
#line 1047 "perly.y"
    { (yyval.opval) = op_convert_list((ps[-1].val.ival), 0, (ps[0].val.opval)); }

    break;

  case 154:
#line 1049 "perly.y"
    { (yyval.opval) = op_convert_list((ps[-3].val.ival), 0, (ps[-1].val.opval)); }

    break;

  case 155:
#line 1051 "perly.y"
    { (yyval.opval) = op_convert_list((ps[-3].val.ival), 0, (ps[-1].val.opval)); }

    break;

  case 156:
#line 1053 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-1].val.ival), 0, NULL, (ps[0].val.opval)); }

    break;

  case 157:
#line 1056 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[-1].val.opval), (ps[0].val.opval)), (ps[-4].val.opval)));
			}

    break;

  case 160:
#line 1071 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[-4].val.opval), scalar((ps[-2].val.opval))); }

    break;

  case 161:
#line 1073 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[-3].val.opval)), scalar((ps[-1].val.opval)));
			}

    break;

  case 162:
#line 1076 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[-4].val.opval)),OP_RV2AV),
					scalar((ps[-1].val.opval)));
			}

    break;

  case 163:
#line 1081 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[-3].val.opval)),OP_RV2AV),
					scalar((ps[-1].val.opval)));
			}

    break;

  case 164:
#line 1086 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[-4].val.opval)), jmaybe((ps[-2].val.opval)));
			}

    break;

  case 165:
#line 1089 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[-5].val.opval)),OP_RV2HV),
					jmaybe((ps[-2].val.opval))); }

    break;

  case 166:
#line 1093 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[-4].val.opval)),OP_RV2HV),
					jmaybe((ps[-2].val.opval))); }

    break;

  case 167:
#line 1097 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[-3].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}

    break;

  case 168:
#line 1103 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[-1].val.opval),
				       newCVREF(0, scalar((ps[-4].val.opval)))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}

    break;

  case 169:
#line 1111 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[-1].val.opval),
					       newCVREF(0, scalar((ps[-3].val.opval)))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}

    break;

  case 170:
#line 1118 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[-2].val.opval))));
			  if (parser->expect == XBLOCK)
			      parser->expect = XOPERATOR;
			}

    break;

  case 171:
#line 1124 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), (ps[-4].val.opval)); }

    break;

  case 172:
#line 1126 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), (ps[-3].val.opval)); }

    break;

  case 173:
#line 1128 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[-1].val.opval), NULL); }

    break;

  case 174:
#line 1133 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[-2].val.opval), (ps[-1].val.ival), (ps[0].val.opval)); }

    break;

  case 175:
#line 1135 "perly.y"
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 176:
#line 1137 "perly.y"
    {   if ((ps[-1].val.ival) != OP_REPEAT)
				scalar((ps[-2].val.opval));
			    (yyval.opval) = newBINOP((ps[-1].val.ival), 0, (ps[-2].val.opval), scalar((ps[0].val.opval)));
			}

    break;

  case 177:
#line 1142 "perly.y"
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 178:
#line 1144 "perly.y"
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 179:
#line 1146 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 180:
#line 1148 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 181:
#line 1150 "perly.y"
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 182:
#line 1152 "perly.y"
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 183:
#line 1154 "perly.y"
    { (yyval.opval) = newRANGE((ps[-1].val.ival), scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 184:
#line 1156 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 185:
#line 1158 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 186:
#line 1160 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 187:
#line 1162 "perly.y"
    { (yyval.opval) = bind_match((ps[-1].val.ival), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 188:
#line 1166 "perly.y"
    { (yyval.opval) = cmpchain_finish((ps[0].val.opval)); }

    break;

  case 189:
#line 1168 "perly.y"
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 190:
#line 1170 "perly.y"
    { yyerror("syntax error"); YYERROR; }

    break;

  case 191:
#line 1172 "perly.y"
    { yyerror("syntax error"); YYERROR; }

    break;

  case 192:
#line 1176 "perly.y"
    { (yyval.opval) = cmpchain_start((ps[-1].val.ival), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 193:
#line 1178 "perly.y"
    { (yyval.opval) = cmpchain_extend((ps[-1].val.ival), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 194:
#line 1182 "perly.y"
    { (yyval.opval) = cmpchain_finish((ps[0].val.opval)); }

    break;

  case 195:
#line 1184 "perly.y"
    { (yyval.opval) = newBINOP((ps[-1].val.ival), 0, scalar((ps[-2].val.opval)), scalar((ps[0].val.opval))); }

    break;

  case 196:
#line 1186 "perly.y"
    { yyerror("syntax error"); YYERROR; }

    break;

  case 197:
#line 1188 "perly.y"
    { yyerror("syntax error"); YYERROR; }

    break;

  case 198:
#line 1192 "perly.y"
    { (yyval.opval) = cmpchain_start((ps[-1].val.ival), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 199:
#line 1194 "perly.y"
    { (yyval.opval) = cmpchain_extend((ps[-1].val.ival), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 200:
#line 1199 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[0].val.opval))); }

    break;

  case 201:
#line 1201 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 202:
#line 1204 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval))); }

    break;

  case 203:
#line 1206 "perly.y"
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, scalar((ps[0].val.opval))); }

    break;

  case 204:
#line 1208 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[-1].val.opval)), OP_POSTINC)); }

    break;

  case 205:
#line 1211 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[-1].val.opval)), OP_POSTDEC));}

    break;

  case 206:
#line 1214 "perly.y"
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[-1].val.opval)
				       ));
			}

    break;

  case 207:
#line 1225 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[0].val.opval)), OP_PREINC)); }

    break;

  case 208:
#line 1228 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[0].val.opval)), OP_PREDEC)); }

    break;

  case 209:
#line 1236 "perly.y"
    { (yyval.opval) = newANONLIST((ps[-1].val.opval)); }

    break;

  case 210:
#line 1238 "perly.y"
    { (yyval.opval) = newANONHASH((ps[-2].val.opval)); }

    break;

  case 211:
#line 1240 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-3].val.ival), (ps[-2].val.opval), (ps[-1].val.opval), (ps[0].val.opval)); }

    break;

  case 212:
#line 1243 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[-2].val.ival), NULL, (ps[-1].val.opval), (ps[0].val.opval)); }

    break;

  case 213:
#line 1249 "perly.y"
    { (yyval.opval) = dofile((ps[0].val.opval), (ps[-1].val.ival));}

    break;

  case 214:
#line 1251 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[0].val.opval)));}

    break;

  case 219:
#line 1259 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[-4].val.opval), (ps[-2].val.opval), (ps[0].val.opval)); }

    break;

  case 220:
#line 1261 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[0].val.opval)); }

    break;

  case 221:
#line 1263 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 222:
#line 1265 "perly.y"
    { (yyval.opval) = localize((ps[0].val.opval),0); }

    break;

  case 223:
#line 1267 "perly.y"
    { (yyval.opval) = sawparens((ps[-1].val.opval)); }

    break;

  case 224:
#line 1269 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 225:
#line 1271 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }

    break;

  case 226:
#line 1273 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 227:
#line 1275 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 228:
#line 1277 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 229:
#line 1279 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 230:
#line 1281 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[0].val.opval), OP_AV2ARYLEN));}

    break;

  case 231:
#line 1283 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 232:
#line 1285 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[-1].val.opval)),
					ref((ps[-3].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[-3].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-3].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 233:
#line 1295 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[-1].val.opval)),
					ref(oopsAV((ps[-3].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[-3].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-3].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 234:
#line 1305 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[-2].val.opval)),
					ref(oopsHV((ps[-4].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[-4].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-4].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 235:
#line 1315 "perly.y"
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[-2].val.opval)),
					ref((ps[-4].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[-4].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[-4].val.opval)->op_private & OPpSLICEWARNING;
			}

    break;

  case 236:
#line 1325 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 237:
#line 1327 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[0].val.opval))); }

    break;

  case 238:
#line 1329 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[-2].val.opval)));
			}

    break;

  case 239:
#line 1332 "perly.y"
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[-1].val.opval), scalar((ps[-3].val.opval))));
			}

    break;

  case 240:
#line 1337 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval))));
			}

    break;

  case 241:
#line 1341 "perly.y"
    { (yyval.opval) = newSVREF((ps[-3].val.opval)); }

    break;

  case 242:
#line 1343 "perly.y"
    { (yyval.opval) = newAVREF((ps[-3].val.opval)); }

    break;

  case 243:
#line 1345 "perly.y"
    { (yyval.opval) = newHVREF((ps[-3].val.opval)); }

    break;

  case 244:
#line 1347 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[-1].val.ival),(ps[-3].val.opval)))); }

    break;

  case 245:
#line 1350 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[-3].val.opval)); }

    break;

  case 246:
#line 1352 "perly.y"
    { (yyval.opval) = newOP((ps[0].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }

    break;

  case 247:
#line 1355 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[-1].val.ival),(ps[0].val.opval)); }

    break;

  case 248:
#line 1357 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[0].val.opval))); }

    break;

  case 249:
#line 1359 "perly.y"
    { (yyval.opval) = newOP((ps[0].val.ival), 0); }

    break;

  case 250:
#line 1361 "perly.y"
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, (ps[0].val.opval)); }

    break;

  case 251:
#line 1363 "perly.y"
    { (yyval.opval) = newUNOP((ps[-1].val.ival), 0, (ps[0].val.opval)); }

    break;

  case 252:
#line 1365 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[0].val.ival) ? OPf_SPECIAL : 0); }

    break;

  case 253:
#line 1367 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[-1].val.ival) ? OPf_SPECIAL : 0, (ps[0].val.opval)); }

    break;

  case 254:
#line 1369 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[0].val.opval))); }

    break;

  case 255:
#line 1371 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[0].val.opval), scalar((ps[-1].val.opval)))); }

    break;

  case 256:
#line 1374 "perly.y"
    { (yyval.opval) = newOP((ps[0].val.ival), 0); }

    break;

  case 257:
#line 1376 "perly.y"
    { (yyval.opval) = newOP((ps[-2].val.ival), 0);}

    break;

  case 258:
#line 1378 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 259:
#line 1380 "perly.y"
    { (yyval.opval) = (ps[-2].val.opval); }

    break;

  case 260:
#line 1382 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[0].val.opval))); }

    break;

  case 261:
#line 1384 "perly.y"
    { (yyval.opval) = ((ps[-2].val.ival) == OP_NOT)
                          ? newUNOP((ps[-2].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[-2].val.ival), OPf_SPECIAL); }

    break;

  case 262:
#line 1388 "perly.y"
    { (yyval.opval) = newUNOP((ps[-3].val.ival), 0, (ps[-1].val.opval)); }

    break;

  case 263:
#line 1390 "perly.y"
    {
			    if (   (ps[0].val.opval)->op_type != OP_TRANS
			        && (ps[0].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[0].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}

    break;

  case 264:
#line 1401 "perly.y"
    { (yyval.opval) = pmruntime((ps[-5].val.opval), (ps[-2].val.opval), (ps[-1].val.opval), 1, (ps[-4].val.ival)); }

    break;

  case 268:
#line 1410 "perly.y"
    { (yyval.opval) = my_attrs((ps[-1].val.opval),(ps[0].val.opval)); }

    break;

  case 269:
#line 1412 "perly.y"
    { (yyval.opval) = localize((ps[0].val.opval),1); }

    break;

  case 270:
#line 1414 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, my_attrs((ps[-1].val.opval),(ps[0].val.opval))); }

    break;

  case 271:
#line 1416 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, localize((ps[0].val.opval),1)); }

    break;

  case 272:
#line 1421 "perly.y"
    { (yyval.opval) = sawparens((ps[-1].val.opval)); }

    break;

  case 273:
#line 1423 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }

    break;

  case 274:
#line 1426 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 275:
#line 1428 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 276:
#line 1430 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 282:
#line 1446 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;

  case 283:
#line 1452 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[0].val.opval)); }

    break;

  case 284:
#line 1457 "perly.y"
    { (yyval.opval) = (ps[-1].val.opval); }

    break;

  case 285:
#line 1459 "perly.y"
    {
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[-2].val.opval), (ps[0].val.opval));
			}

    break;

  case 287:
#line 1466 "perly.y"
    { parser->in_my = 0; (yyval.opval) = (ps[0].val.opval); }

    break;

  case 295:
#line 1483 "perly.y"
    { (yyval.opval) = newCVREF((ps[-1].val.ival),(ps[0].val.opval)); }

    break;

  case 296:
#line 1487 "perly.y"
    { (yyval.opval) = newSVREF((ps[0].val.opval)); }

    break;

  case 297:
#line 1491 "perly.y"
    { (yyval.opval) = newAVREF((ps[0].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[-1].val.ival);
			}

    break;

  case 298:
#line 1497 "perly.y"
    { (yyval.opval) = newHVREF((ps[0].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[-1].val.ival);
			}

    break;

  case 299:
#line 1503 "perly.y"
    { (yyval.opval) = newAVREF((ps[0].val.opval)); }

    break;

  case 300:
#line 1505 "perly.y"
    { (yyval.opval) = newAVREF((ps[-3].val.opval)); }

    break;

  case 301:
#line 1509 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[0].val.opval)); }

    break;

  case 303:
#line 1514 "perly.y"
    { (yyval.opval) = newAVREF((ps[-2].val.opval)); }

    break;

  case 305:
#line 1519 "perly.y"
    { (yyval.opval) = newHVREF((ps[-2].val.opval)); }

    break;

  case 307:
#line 1524 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[-2].val.opval)); }

    break;

  case 308:
#line 1529 "perly.y"
    { (yyval.opval) = scalar((ps[0].val.opval)); }

    break;

  case 309:
#line 1531 "perly.y"
    { (yyval.opval) = scalar((ps[0].val.opval)); }

    break;

  case 310:
#line 1533 "perly.y"
    { (yyval.opval) = op_scope((ps[0].val.opval)); }

    break;

  case 311:
#line 1536 "perly.y"
    { (yyval.opval) = (ps[0].val.opval); }

    break;



      default: break;
    

/* Generated from:
 * 640372bc6fea73f08721cfd12451f0456f6dfada1181ca04a22ea92bb86c4b58 perly.y
 * acf1cbfd2545faeaaa58b1cf0cf9d7f98b5be0752eb7a54528ef904a9e2e1ca7 regen_perly.pl
 * ex: set ro: */
