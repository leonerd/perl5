=head1 NAME

perlclass - Perl class syntax reference

=head1 SYNOPSIS

    use v5.36;
    use feature 'class';

    class My::Example 1.234 {
        field $x;
        ADJUST { $x = "Hello, world"; }

        method print_message { say $x; }
    }

    My::Example->new->print_message;

=head1 DESCRIPTION

This document describes the syntax of the Perl's C<class> feature, which
provider native keywords supporting object oriented programming paradigm.

=head2 History

Since Perl 5, support for objects resolved around the concept of
I<blessing> references with a package name. Such reference could then be used
to call subroutines from the package it was blessed with (or any of its
parents). This system, while bare-bones, was flexible enough to allow creation
of multiple more advanced, community-driven systems for object orientation.

Class feature is a core implementation of class syntax which is familiar to
what one would find in other programming languages. It isn't a C<bless>
wrapper, but a completely new system built right into the perl interpreter.

=head1 KEYWORDS

Enabling the C<class> feature allows the usage of the following new keywords in
the scope of current package:

=head2 class

	class NAME BLOCK

	class NAME VERSION BLOCK

The C<class> keyword declares a new package which is intended to be a class.
All other keywords from the C<class> feature should be used in scope of this
declaration.

There are following differences between C<package> and C<class> keywords:

=over

=item * Creates a new scope for variables declared using the L<field> keyword

=item * Classes automatically get a constructor named C<new>

You don't have to (and should not) write one.

=back

=head2 field

	field VARIABLE_NAME;

Fields are variables which are visible in the scope of the class - more
specifically within L<method> and L<ADJUST> blocks. Each class instance get
their own storage of fields, independent of each other.

A field behaves like a normal lexically scoped variable. It has a sigil and is
private to the class unless an accessor method is created. The main difference
is that different instances access different values in the same scope.

=head2 method

	method METHOD_NAME SIGNATURE BLOCK

Methods are subroutines intended to call in the context of class objects.

A variable named C<$self> populated with the current object instance will automatically be
created in the lexical scope of C<method>.

Methods always act as if C<use feature 'signatures'> is in effect, but C<$self>
will not appear in the arguments list as far as the signature is concerned.

    class Class::WithSignatures {
        method greet($name = "someone") {
            say "Hello, $name";
        }
    }

=head1 ATTRIBUTES

Specific aspects of the keywords defined above are declared using I<attributes>.

=head2 Class attributes

=head3 :isa

Classes may inherit from B<one> superclass, by using the C<:isa> class
attribute.

  class Example::Base { ... }

  class Example::Subclass :isa(Example::Base) { ... }

Inherited methods are visible and may be invoked. Fields are always lexical
and therefore not visible by inheritence.

The C<:isa> attribute may request a minimum version of the base class; it is
applied similar to C<use> - if the provided version is too low it will fail at
compile time.

  class Example::Subclass :isa(Example::Base 2.345) { ... }

The C<:isa> attribute will attempt to C<require> the named module if it is not
already loaded.

=head2 Field attributes

TODO

=head2 Method attributes

TODO

=head1 OBJECT LIFECYCLE

=head2 Construction

Each object begins its life with a constructor call. The constructor is always
named C<new> and is invoked like a method call on the class name:

	my $object = My::Class->new(%arguments);

During the construction, class fields are compared to C<%arguments> hash and
populated where possible.

=head2 Adjustment

Object adjustment can be performed during the construction to run user-defined
code. It is done with the help of C<ADJUST> blocks, which run during the
construction time of each instance.

They are similar to C<BEGIN> blocks, which
run during the compilation of a package. However, they also have access to
C<$self> lexical (object instance).

=head2 Lifetime

After the construction phase, object is ready to be used. Just like a normal
reference, it will live as long as its reference count is greater than zero.

=head2 Destruction

TODO

=cut

